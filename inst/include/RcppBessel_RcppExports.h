// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppBessel_RCPPEXPORTS_H_GEN_
#define RCPP_RcppBessel_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppBessel {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppBessel", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppBessel", "_RcppBessel_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppBessel");
            }
        }
    }

    inline SEXP bessel_k(SEXP z, double nu, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_bessel_k)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_bessel_k p_bessel_k = NULL;
        if (p_bessel_k == NULL) {
            validateSignature("SEXP(*bessel_k)(SEXP,double,bool,int)");
            p_bessel_k = (Ptr_bessel_k)R_GetCCallable("RcppBessel", "_RcppBessel_bessel_k");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bessel_k(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(nu)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP bessel_i(SEXP z, double nu, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_bessel_i)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_bessel_i p_bessel_i = NULL;
        if (p_bessel_i == NULL) {
            validateSignature("SEXP(*bessel_i)(SEXP,double,bool,int)");
            p_bessel_i = (Ptr_bessel_i)R_GetCCallable("RcppBessel", "_RcppBessel_bessel_i");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bessel_i(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(nu)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP bessel_j(SEXP z, double nu, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_bessel_j)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_bessel_j p_bessel_j = NULL;
        if (p_bessel_j == NULL) {
            validateSignature("SEXP(*bessel_j)(SEXP,double,bool,int)");
            p_bessel_j = (Ptr_bessel_j)R_GetCCallable("RcppBessel", "_RcppBessel_bessel_j");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bessel_j(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(nu)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP bessel_y(SEXP z, double nu, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_bessel_y)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_bessel_y p_bessel_y = NULL;
        if (p_bessel_y == NULL) {
            validateSignature("SEXP(*bessel_y)(SEXP,double,bool,int)");
            p_bessel_y = (Ptr_bessel_y)R_GetCCallable("RcppBessel", "_RcppBessel_bessel_y");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bessel_y(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(nu)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP bessel_h(int m, SEXP z, double nu, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_bessel_h)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_bessel_h p_bessel_h = NULL;
        if (p_bessel_h == NULL) {
            validateSignature("SEXP(*bessel_h)(int,SEXP,double,bool,int)");
            p_bessel_h = (Ptr_bessel_h)R_GetCCallable("RcppBessel", "_RcppBessel_bessel_h");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bessel_h(Shield<SEXP>(Rcpp::wrap(m)), Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(nu)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP airy_a(SEXP z, int deriv = 0, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_airy_a)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_airy_a p_airy_a = NULL;
        if (p_airy_a == NULL) {
            validateSignature("SEXP(*airy_a)(SEXP,int,bool,int)");
            p_airy_a = (Ptr_airy_a)R_GetCCallable("RcppBessel", "_RcppBessel_airy_a");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_airy_a(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(deriv)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP airy_b(SEXP z, int deriv = 0, bool expon_scaled = false, int verbose = 0) {
        typedef SEXP(*Ptr_airy_b)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_airy_b p_airy_b = NULL;
        if (p_airy_b == NULL) {
            validateSignature("SEXP(*airy_b)(SEXP,int,bool,int)");
            p_airy_b = (Ptr_airy_b)R_GetCCallable("RcppBessel", "_RcppBessel_airy_b");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_airy_b(Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(deriv)), Shield<SEXP>(Rcpp::wrap(expon_scaled)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_RcppBessel_RCPPEXPORTS_H_GEN_
